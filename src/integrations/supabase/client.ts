// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js'
import type { Database } from './types'

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseAnonKey) {
  throw new Error('Missing Supabase environment variables')
}

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(supabaseUrl, supabaseAnonKey, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true,
    flowType: 'pkce'
  }
})

// Handle authentication errors gracefully
supabase.auth.onAuthStateChange((event, session) => {
  if (event === 'TOKEN_REFRESHED') {
    console.log('Token refreshed successfully')
  } else if (event === 'SIGNED_OUT') {
    // Clear any cached data when user signs out
    localStorage.removeItem('supabase.auth.token')
    sessionStorage.clear()
  }
})

// Add error handling for token refresh failures
const originalRefreshSession = supabase.auth.refreshSession
supabase.auth.refreshSession = async function(...args) {
  try {
    return await originalRefreshSession.apply(this, args)
  } catch (error: any) {
    if (error?.message?.includes('refresh_token_not_found') || 
        error?.message?.includes('Invalid Refresh Token')) {
      // Clear invalid session data
      await supabase.auth.signOut()
      console.log('Invalid refresh token cleared, user signed out')
    }
    throw error
  }
}